LIBRARY_DIR=$(HOME)/iTensor
include $(LIBRARY_DIR)/options.mk

################################################################
#Options --------------

HEADERS=params.h writedata.h fitting.h LongRangeSpinLadder.h topopts.h

APP=tladder
#APP=haldane

TENSOR_HEADERS=core.h

LIBNAMES=itensor matrix utilities

#################################################################

OBJECTS=$(APP).o

#Define Dirs -----------
INCLUDEDIR=. -I$(LIBRARY_DIR)/include -I$(BOOST_DIR)
LOCAL_LIBDIR=$(LIBRARY_DIR)/lib
LIBDIR=$(LOCAL_LIBDIR)

#Mappings --------------
LOCAL_LIBFLAGS=$(patsubst %,-l%, $(LIBNAMES))
LOCAL_LIBGFLAGS=$(patsubst %,-l%-g, $(LIBNAMES))
LOCAL_LIBS=$(patsubst %,$(LOCAL_LIBDIR)/lib%.a, $(LIBNAMES))
LOCAL_GLIBS=$(patsubst %,$(LOCAL_LIBDIR)/lib%-g.a, $(LIBNAMES))
REL_TENSOR_HEADERS=$(patsubst %,$(LIBRARY_DIR)/include/%, $(TENSOR_HEADERS))
GOBJECTS=$(patsubst %,.debug_objs/%, $(OBJECTS))

#Define Flags ----------
CCFLAGS= -I$(INCLUDEDIR) $(BLAS_LAPACK_INCLUDEFLAGS) $(OPTIMIZATIONS) -DUSE_MKL
CCGFLAGS= -I$(INCLUDEDIR) $(BLAS_LAPACK_INCLUDEFLAGS) -DDEBUG -DMATRIXBOUNDS -DBOUNDS -g -Wall -DSTRONG_DEBUG -DUSE_MKL
LIBFLAGS= -L$(LIBDIR) $(LOCAL_LIBFLAGS) $(BLAS_LAPACK_LIBFLAGS)
LIBGFLAGS= -L$(LIBDIR) $(LOCAL_LIBGFLAGS) $(BLAS_LAPACK_LIBFLAGS)

#Rules ------------------

%.o: %.cc $(HEADERS) $(REL_TENSOR_HEADERS)
	$(CCCOM) -c $(CCFLAGS) -o $@ $<

.debug_objs/%.o: %.cc $(HEADERS) $(REL_TENSOR_HEADERS)
	$(CCCOM) -c $(CCGFLAGS) -o $@ $<

#Targets -----------------

default: build

build: $(APP)
debug: $(APP)-g

$(APP): $(OBJECTS) $(LOCAL_LIBS)
	$(CCCOM) $(CCFLAGS) $(OBJECTS) -o $(APP) $(LIBFLAGS)

$(APP)-g: mkdebugdir $(GOBJECTS) $(LOCAL_GLIBS)
	$(CCCOM) $(CCGFFLAGS) $(GOBJECTS) -o $(APP)-g $(LIBGFLAGS)

mkdebugdir:
	mkdir -p .debug_objs

clean:
	rm -fr *.o $(APP) .debug_objs

DEP= -I/usr/include/g++ -I/usr/include/g++-2 -- $(SOURCES)

depend:
	makedepend -o.o -- $(CCFLAGS) $(DEP)
# DO NOT DELETE
